// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	balanceAPI "github.com/cucumberjaye/balanceAPI"
	gomock "github.com/golang/mock/gomock"
)

// MockBalance is a mock of Balance interface.
type MockBalance struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceMockRecorder
}

// MockBalanceMockRecorder is the mock recorder for MockBalance.
type MockBalanceMockRecorder struct {
	mock *MockBalance
}

// NewMockBalance creates a new mock instance.
func NewMockBalance(ctrl *gomock.Controller) *MockBalance {
	mock := &MockBalance{ctrl: ctrl}
	mock.recorder = &MockBalanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalance) EXPECT() *MockBalanceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockBalance) Add(userData balanceAPI.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockBalanceMockRecorder) Add(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockBalance)(nil).Add), userData)
}

// Decrease mocks base method.
func (m *MockBalance) Decrease(userData balanceAPI.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrease", userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrease indicates an expected call of Decrease.
func (mr *MockBalanceMockRecorder) Decrease(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrease", reflect.TypeOf((*MockBalance)(nil).Decrease), userData)
}

// GetBalance mocks base method.
func (m *MockBalance) GetBalance(userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceMockRecorder) GetBalance(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalance)(nil).GetBalance), userId)
}

// GetTransactions mocks base method.
func (m *MockBalance) GetTransactions(userId int, sortBy string) ([]balanceAPI.Transactions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", userId, sortBy)
	ret0, _ := ret[0].([]balanceAPI.Transactions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockBalanceMockRecorder) GetTransactions(userId, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockBalance)(nil).GetTransactions), userId, sortBy)
}

// Transfer mocks base method.
func (m *MockBalance) Transfer(usersData balanceAPI.TwoUsers) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", usersData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockBalanceMockRecorder) Transfer(usersData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockBalance)(nil).Transfer), usersData)
}
